Old Version,New Version,File,Category of Change,Description,Diff
/tmp/tmp9n5gi1jx/resolvelib/reporters.py,/tmp/tmpa6lvi4p4/resolvelib/reporters.py,resolvelib/reporters.py,Modification,37 lines changed,"['--- ', '+++ ', '@@ -1,10 +1,8 @@', ' class BaseReporter(object):\n', '-    """"""Delegate class to provider progress reporting for the resolver.\n', '-    """"""\n', '+    """"""Delegate class to provider progress reporting for the resolver.""""""\n', ' \n', '     def starting(self):\n', '-        """"""Called before the resolution actually starts.\n', '-        """"""\n', '+        """"""Called before the resolution actually starts.""""""\n', ' \n', '     def starting_round(self, index):\n', '         """"""Called before each round of resolution starts.\n', '@@ -20,8 +18,7 @@', '         """"""\n', ' \n', '     def ending(self, state):\n', '-        """"""Called before the resolution ends successfully.\n', '-        """"""\n', '+        """"""Called before the resolution ends successfully.""""""\n', ' \n', '     def adding_requirement(self, requirement, parent):\n', '         """"""Called when adding a new requirement into the resolve criteria.\n', '@@ -34,9 +31,7 @@', '         """"""\n', ' \n', '     def backtracking(self, candidate):\n', '-        """"""Called when rejecting a candidate during backtracking.\n', '-        """"""\n', '+        """"""Called when rejecting a candidate during backtracking.""""""\n', ' \n', '     def pinning(self, candidate):\n', '-        """"""Called when adding a candidate to the potential solution.\n', '-        """"""\n', '+        """"""Called when adding a candidate to the potential solution.""""""\n']"
/tmp/tmp9n5gi1jx/resolvelib/providers.py,/tmp/tmpa6lvi4p4/resolvelib/providers.py,resolvelib/providers.py,Modification,92 lines changed,"['--- ', '+++ ', '@@ -1,32 +1,36 @@', ' class AbstractProvider(object):\n', '-    """"""Delegate class to provide requirement interface for the resolver.\n', '-    """"""\n', '+    """"""Delegate class to provide requirement interface for the resolver.""""""\n', ' \n', '-    def identify(self, dependency):\n', '-        """"""Given a dependency, return an identifier for it.\n', '+    def identify(self, requirement_or_candidate):\n', '+        """"""Given a requirement or candidate, return an identifier for it.\n', ' \n', '-        This is used in many places to identify the dependency, e.g. whether\n', '-        two requirements should have their specifier parts merged, whether\n', '-        two specifications would conflict with each other (because they the\n', '-        same name but different versions).\n', '+        This is used in many places to identify a requirement or candidate,\n', '+        e.g. whether two requirements should have their specifier parts merged,\n', '+        whether two candidates would conflict with each other (because they\n', '+        have same name but different versions).\n', '         """"""\n', '         raise NotImplementedError\n', ' \n', '     def get_preference(self, resolution, candidates, information):\n', '-        """"""Produce a sort key for given specification based on preference.\n', '+        """"""Produce a sort key for given requirement based on preference.\n', ' \n', '         The preference is defined as ""I think this requirement should be\n', '         resolved first"". The lower the return value is, the more preferred\n', '         this group of arguments is.\n', ' \n', '         :param resolution: Currently pinned candidate, or `None`.\n', '-        :param candidates: A list of possible candidates.\n', '+        :param candidates: An iterable of possible candidates.\n', '         :param information: A list of requirement information.\n', ' \n', '-        Each information instance is a named tuple with two entries:\n', ""+        The `candidates` iterable's exact type depends on the return type of\n"", '+        `find_matches()`. A sequence is passed-in as-is if possible. If it\n', '+        returns a callble, the iterator returned by that callable is passed\n', '+        in here.\n', '+\n', '+        Each element in `information` is a named tuple with two entries:\n', ' \n', '         * `requirement` specifies a requirement contributing to the current\n', '-          candidate list\n', '+          candidate list.\n', '         * `parent` specifies the candidate that provides (dependend on) the\n', '           requirement, or `None` to indicate a root requirement.\n', ' \n', '@@ -43,7 +47,7 @@', ' \n', '         A sortable value should be returned (this will be used as the `key`\n', '         parameter of the built-in sorting function). The smaller the value is,\n', '-        the more preferred this specification is (i.e. the sorting function\n', '+        the more preferred this requirement is (i.e. the sorting function\n', '         is called with `reverse=False`).\n', '         """"""\n', '         raise NotImplementedError\n', '@@ -56,11 +60,18 @@', '         returned, and for a ""named"" requirement, the index(es) should be\n', '         consulted to find concrete candidates for this requirement.\n', ' \n', '-        :param requirements: A collection of requirements which all of the the\n', '+        The return value should produce candidates ordered by preference; the\n', '+        most preferred candidate should come first. The return type may be one\n', '+        of the following:\n', '+\n', '+        * A callable that returns an iterator that yields candidates.\n', '+        * An collection of candidates.\n', '+        * An iterable of candidates. This will be consumed immediately into a\n', '+          list of candidates.\n', '+\n', '+        :param requirements: A collection of requirements which all of the\n', '             returned candidates must match. All requirements are guaranteed to\n', '             have the same identifier. The collection is never empty.\n', '-        :returns: An iterable that orders candidates by preference, e.g. the\n', '-            most preferred candidate should come first.\n', '         """"""\n', '         raise NotImplementedError\n', ' \n', '@@ -85,8 +96,7 @@', ' \n', ' \n', ' class AbstractResolver(object):\n', '-    """"""The thing that performs the actual resolution work.\n', '-    """"""\n', '+    """"""The thing that performs the actual resolution work.""""""\n', ' \n', '     base_exception = Exception\n', ' \n']"
/tmp/tmp9n5gi1jx/resolvelib/structs.py,/tmp/tmpa6lvi4p4/resolvelib/structs.py,resolvelib/structs.py,Modification,104 lines changed,"['--- ', '+++ ', '@@ -1,6 +1,5 @@', ' class DirectedGraph(object):\n', '-    """"""A graph structure with directed edges.\n', '-    """"""\n', '+    """"""A graph structure with directed edges.""""""\n', ' \n', '     def __init__(self):\n', '         self._vertices = set()\n', '@@ -17,8 +16,7 @@', '         return key in self._vertices\n', ' \n', '     def copy(self):\n', '-        """"""Return a shallow copy of this graph.\n', '-        """"""\n', '+        """"""Return a shallow copy of this graph.""""""\n', '         other = DirectedGraph()\n', '         other._vertices = set(self._vertices)\n', '         other._forwards = {k: set(v) for k, v in self._forwards.items()}\n', '@@ -26,8 +24,7 @@', '         return other\n', ' \n', '     def add(self, key):\n', '-        """"""Add a new vertex to the graph.\n', '-        """"""\n', '+        """"""Add a new vertex to the graph.""""""\n', '         if key in self._vertices:\n', '             raise ValueError(""vertex exists"")\n', '         self._vertices.add(key)\n', '@@ -35,8 +32,7 @@', '         self._backwards[key] = set()\n', ' \n', '     def remove(self, key):\n', '-        """"""Remove a vertex from the graph, disconnecting all edges from/to it.\n', '-        """"""\n', '+        """"""Remove a vertex from the graph, disconnecting all edges from/to it.""""""\n', '         self._vertices.remove(key)\n', '         for f in self._forwards.pop(key):\n', '             self._backwards[f].remove(key)\n', '@@ -66,3 +62,63 @@', ' \n', '     def iter_parents(self, key):\n', '         return iter(self._backwards[key])\n', '+\n', '+\n', '+class _FactoryIterableView(object):\n', '+    """"""Wrap an iterator factory returned by `find_matches()`.\n', '+\n', '+    Calling `iter()` on this class would invoke the underlying iterator\n', '+    factory, making it a ""collection with ordering"" that can be iterated\n', '+    through multiple times, but lacks random access methods presented in\n', '+    built-in Python sequence types.\n', '+    """"""\n', '+\n', '+    def __init__(self, factory):\n', '+        self._factory = factory\n', '+\n', '+    def __bool__(self):\n', '+        try:\n', '+            next(self._factory())\n', '+        except StopIteration:\n', '+            return False\n', '+        return True\n', '+\n', '+    __nonzero__ = __bool__  # XXX: Python 2.\n', '+\n', '+    def __iter__(self):\n', '+        return self._factory()\n', '+\n', '+    def for_preference(self):\n', '+        """"""Provide an candidate iterable for `get_preference()`""""""\n', '+        return self._factory()\n', '+\n', '+    def excluding(self, candidate):\n', '+        """"""Create a new `Candidates` instance excluding `candidate`.""""""\n', '+\n', '+        def factory():\n', '+            return (c for c in self._factory() if c != candidate)\n', '+\n', '+        return type(self)(factory)\n', '+\n', '+\n', '+class _SequenceIterableView(list):\n', '+    """"""Wrap an iterable returned by find_matches().\n', '+\n', '+    This is essentially just a proxy to the underlying sequence that provides\n', '+    the same interface as `_FactoryIterableView`.\n', '+    """"""\n', '+\n', '+    def for_preference(self):\n', '+        """"""Provide an candidate iterable for `get_preference()`""""""\n', '+        return self\n', '+\n', '+    def excluding(self, candidate):\n', '+        """"""Create a new instance excluding `candidate`.""""""\n', '+        return type(self)(c for c in self if c != candidate)\n', '+\n', '+\n', '+def build_iter_view(matches):\n', '+    """"""Build an iterable view from the value returned by `find_matches()`.""""""\n', '+    if callable(matches):\n', '+        return _FactoryIterableView(matches)\n', '+    return _SequenceIterableView(matches)\n']"
/tmp/tmp9n5gi1jx/resolvelib/__init__.py,/tmp/tmpa6lvi4p4/resolvelib/__init__.py,resolvelib/__init__.py,Modification,11 lines changed,"['--- ', '+++ ', '@@ -11,7 +11,7 @@', '     ""ResolutionTooDeep"",\n', ' ]\n', ' \n', '-__version__ = ""0.4.0""\n', '+__version__ = ""0.5.1""\n', ' \n', ' \n', ' from .providers import AbstractProvider, AbstractResolver\n']"
/tmp/tmp9n5gi1jx/resolvelib/compat/collections_abc.py,N/A,resolvelib/compat/collections_abc.py,Removal,File removed in new version,
/tmp/tmp9n5gi1jx/resolvelib/compat/__init__.py,N/A,resolvelib/compat/__init__.py,Removal,File removed in new version,
/tmp/tmp9n5gi1jx/resolvelib/resolvers.py,/tmp/tmpa6lvi4p4/resolvelib/resolvers.py,resolvelib/resolvers.py,Modification,109 lines changed,"['--- ', '+++ ', '@@ -1,8 +1,7 @@', ' import collections\n', ' \n', '-from .compat import collections_abc\n', ' from .providers import AbstractResolver\n', '-from .structs import DirectedGraph\n', '+from .structs import DirectedGraph, build_iter_view\n', ' \n', ' \n', ' RequirementInformation = collections.namedtuple(\n', '@@ -76,17 +75,11 @@', ' \n', '     @classmethod\n', '     def from_requirement(cls, provider, requirement, parent):\n', '-        """"""Build an instance from a requirement.\n', '-        """"""\n', '-        candidates = provider.find_matches([requirement])\n', '-        if not isinstance(candidates, collections_abc.Sequence):\n', '-            candidates = list(candidates)\n', '-        criterion = cls(\n', '-            candidates=candidates,\n', '-            information=[RequirementInformation(requirement, parent)],\n', '-            incompatibilities=[],\n', '-        )\n', '-        if not candidates:\n', '+        """"""Build an instance from a requirement.""""""\n', '+        cands = build_iter_view(provider.find_matches([requirement]))\n', '+        infos = [RequirementInformation(requirement, parent)]\n', '+        criterion = cls(cands, infos, incompatibilities=[])\n', '+        if not cands:\n', '             raise RequirementsConflicted(criterion)\n', '         return criterion\n', ' \n', '@@ -97,15 +90,12 @@', '         return (i.parent for i in self.information)\n', ' \n', '     def merged_with(self, provider, requirement, parent):\n', '-        """"""Build a new instance from this and a new requirement.\n', '-        """"""\n', '+        """"""Build a new instance from this and a new requirement.""""""\n', '         infos = list(self.information)\n', '         infos.append(RequirementInformation(requirement, parent))\n', '-        candidates = provider.find_matches([r for r, _ in infos])\n', '-        if not isinstance(candidates, collections_abc.Sequence):\n', '-            candidates = list(candidates)\n', '-        criterion = type(self)(candidates, infos, list(self.incompatibilities))\n', '-        if not candidates:\n', '+        cands = build_iter_view(provider.find_matches([r for r, _ in infos]))\n', '+        criterion = type(self)(cands, infos, list(self.incompatibilities))\n', '+        if not cands:\n', '             raise RequirementsConflicted(criterion)\n', '         return criterion\n', ' \n', '@@ -114,13 +104,12 @@', ' \n', '         Returns the new instance, or None if we still have no valid candidates.\n', '         """"""\n', '+        cands = self.candidates.excluding(candidate)\n', '+        if not cands:\n', '+            return None\n', '         incompats = list(self.incompatibilities)\n', '         incompats.append(candidate)\n', '-        candidates = [c for c in self.candidates if c != candidate]\n', '-        if not candidates:\n', '-            return None\n', '-        criterion = type(self)(candidates, list(self.information), incompats)\n', '-        return criterion\n', '+        return type(self)(cands, list(self.information), incompats)\n', ' \n', ' \n', ' class ResolutionError(ResolverException):\n', '@@ -175,7 +164,8 @@', '             state = State(mapping=collections.OrderedDict(), criteria={})\n', '         else:\n', '             state = State(\n', '-                mapping=base.mapping.copy(), criteria=base.criteria.copy(),\n', '+                mapping=base.mapping.copy(),\n', '+                criteria=base.criteria.copy(),\n', '             )\n', '         self._states.append(state)\n', ' \n', '@@ -192,12 +182,10 @@', ' \n', '     def _get_criterion_item_preference(self, item):\n', '         name, criterion = item\n', '-        try:\n', '-            pinned = self.state.mapping[name]\n', '-        except KeyError:\n', '-            pinned = None\n', '         return self._p.get_preference(\n', '-            pinned, criterion.candidates, criterion.information,\n', '+            self.state.mapping.get(name),\n', '+            criterion.candidates.for_preference(),\n', '+            criterion.information,\n', '         )\n', ' \n', '     def _is_current_pin_satisfying(self, name, criterion):\n', '@@ -390,8 +378,7 @@', ' \n', ' \n', ' class Resolver(AbstractResolver):\n', '-    """"""The thing that performs the actual resolution work.\n', '-    """"""\n', '+    """"""The thing that performs the actual resolution work.""""""\n', ' \n', '     base_exception = ResolverException\n', ' \n']"
